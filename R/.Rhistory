#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
pred_test_penalized
sum(is.na(pred_test_penalized))
sum(!is.na(pred_test_penalized))
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
sum(is.na(pred_test_xgb))
sum(is.na(pred_test_glm))
sum(is.na(pred_test_sgd))
sum(is.na(pred_test_penalized))
sum(is.na(pred_test_glmnet))
pred_test_xgb[which(is.na(pred_test_glm))]
pred_test_sgd[which(is.na(pred_test_glm))]
df.test[which(is.na(pred_test_glm)),]
df.test[which(is.na(pred_test_glm))[1:10],]
sum(!is.na(df.test$G))
sum(is.na(df.test$G))
G_ = getDataT(DATA_SET,paste("s_feat_test_all_","G",sep = ""))[idxTest]
B_ = getDataT(DATA_SET,paste("s_feat_test_all_","B",sep = ""))[idxTest]
AA_ = getDataT(DATA_SET,paste("s_feat_test_all_","AA",sep = ""))[idxTest]
C_ = getDataT(DATA_SET,paste("s_feat_test_all_","C",sep = ""))[idxTest]
AB_ = getDataT(DATA_SET,paste("s_feat_test_all_","AB",sep = ""))[idxTest]
mean_pred_test = 0.718*G_ + 0.187*B_ + 0.115
mean_pred_test[which(is.na(mean_pred_test))] = 0.745*B_[which(is.na(mean_pred_test))] + 0.192
mean_pred_test[which(is.na(mean_pred_test))] = 0.822*AA_[which(is.na(mean_pred_test))] + 0.855
mean_pred_test[which(is.na(mean_pred_test))] = 0.53*C_[which(is.na(mean_pred_test))] + 0.95
mean_pred_test[which(is.na(mean_pred_test))] = 0.5*AB_[which(is.na(mean_pred_test))] + 1
err_mean_pred_test = errMeasure3(mean_pred_test,df.test.target)
print(err_mean_pred_test)
sum(is.na(mean_pred_test))
# with GLMNET:
print("GLMNET")
fmla_c = fmla_c_glmnet
# LOAD the train and test data:
df.train <- data.frame(id=idxTrain)
for (j in fmla_c)
df.train[j] = getDataT(DATA_SET,paste("s_feat_train_all_",j,sep = ""))[idxTrain]
df.train$id <- NULL
df.train.target = getDataT(DATA_SET,"train")[idxTrain,]$Demanda_uni_equil
df.test <- data.frame(id=idxTest)
for (j in fmla_c)
df.test[j] = getDataT(DATA_SET,paste("s_feat_test_all_",j,sep = ""))[idxTest]
df.test$id <- NULL
df.test.target = getDataT(DATA_SET,"test")[idxTest,]$Demanda_uni_equil
# FIT on train ...
x = as.matrix(df.train)
y = as.matrix(df.train.target)
fit.lambda  = cv.glmnet(x,y)
fit.train <- glmnet(x, y, family="gaussian", alpha=0, lambda=fit.lambda$lambda.1se)
# PREDICT on test cv ...
x = as.matrix(df.test)
pred_test <- predict.glmnet(fit.train, x, type="link",s=fit.train$lambda[length(fit.train$lambda)])
pred_test[which(pred_test<0)] = 0
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
pred_test_glmnet[which(is.na(pred_test_glm))]
pred_test_glmnet[which(is.na(pred_test_glm))] = df.test$AA[which(is.na(pred_test_glm))]
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
pred_test=pred_test_glmnet
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
sum(is.na(pred_test))
df.test$AA[which(is.na(pred_test_glm))]
pred_test_glmnet[which(is.na(pred_test_glm))] = df.test$AA[which(is.na(pred_test_glmnet))]
pred_test=pred_test_glmnet
sum(is.na(pred_test))
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
df.test$AA-df.test$BB
df.test$AA - df.test$BB
df.test$AA-df.test$AB
plot(df.test$AA-df.test$AB)
plot(df.test$AA-df.test$AB)
plot(df.test$AA-df.test.target )
plot(df.test$AB-df.test.target )
plot(1.5*df.test$AB-df.test.target )
plot(2*df.test$AB-df.test.target )
plot(0.5*df.test$AB-df.test.target )
plot(df.test$AB+df.test$AA -2*df.test.target )
plot(df.test$AB+df.test$AA -df.test.target )
mean(df.test.target)
mean(pred_test_glmnet)
mean(pred_test_glm)
fmla_c_glmnet = c("AA","AB","AA1","AB1")
print("GLMNET")
fmla_c = fmla_c_glmnet
# LOAD the train and test data:
df.train <- data.frame(id=idxTrain)
for (j in fmla_c)
df.train[j] = getDataT(DATA_SET,paste("s_feat_train_all_",j,sep = ""))[idxTrain]
df.train$id <- NULL
df.train.target = getDataT(DATA_SET,"train")[idxTrain,]$Demanda_uni_equil
df.test <- data.frame(id=idxTest)
for (j in fmla_c)
df.test[j] = getDataT(DATA_SET,paste("s_feat_test_all_",j,sep = ""))[idxTest]
df.test$id <- NULL
df.test.target = getDataT(DATA_SET,"test")[idxTest,]$Demanda_uni_equil
# FIT on train ...
x = as.matrix(df.train)
y = as.matrix(df.train.target)
fit.lambda  = cv.glmnet(x,y)
fit.train <- glmnet(x, y, family="gaussian", alpha=0, lambda=fit.lambda$lambda.1se)
# PREDICT on test cv ...
x = as.matrix(df.test)
pred_test <- predict.glmnet(fit.train, x, type="link",s=fit.train$lambda[length(fit.train$lambda)])
pred_test[which(pred_test<0)] = 0
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
sum(is.na(pred_test_glmnet))
sum(is.na(df.train))
sum(is.na(df.test))
sum(is.na(df.test$AA1))
sum(is.na(df.test$AA))
sum(is.na(df.test$AB))
sum(is.na(df.test$AB1))
fmla_c_glmnet = c("AA","AA1")
print("GLMNET")
fmla_c = fmla_c_glmnet
# LOAD the train and test data:
df.train <- data.frame(id=idxTrain)
for (j in fmla_c)
df.train[j] = getDataT(DATA_SET,paste("s_feat_train_all_",j,sep = ""))[idxTrain]
df.train$id <- NULL
df.train.target = getDataT(DATA_SET,"train")[idxTrain,]$Demanda_uni_equil
df.test <- data.frame(id=idxTest)
for (j in fmla_c)
df.test[j] = getDataT(DATA_SET,paste("s_feat_test_all_",j,sep = ""))[idxTest]
df.test$id <- NULL
df.test.target = getDataT(DATA_SET,"test")[idxTest,]$Demanda_uni_equil
# FIT on train ...
x = as.matrix(df.train)
y = as.matrix(df.train.target)
fit.lambda  = cv.glmnet(x,y)
fit.train <- glmnet(x, y, family="gaussian", alpha=0, lambda=fit.lambda$lambda.1se)
# PREDICT on test cv ...
x = as.matrix(df.test)
pred_test <- predict.glmnet(fit.train, x, type="link",s=fit.train$lambda[length(fit.train$lambda)])
pred_test[which(pred_test<0)] = 0
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 1000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 2:2
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
print(c(err_pred_test_glm,err_pred_test_glmnet,err_pred_test_penalized,err_pred_test_sgd,err_pred_test_xgb))
mean_pred_test = (pred_test_glm + pred_test_glmnet + pred_test_penalized + 0*pred_test_sgd + pred_test_xgb)/4
errMeasure3(mean_pred_test,df.test.target)
fmla_c_glmnet = c("AA","AA1","AAMAX","AA1MAX")
print("GLMNET")
fmla_c = fmla_c_glmnet
# LOAD the train and test data:
df.train <- data.frame(id=idxTrain)
for (j in fmla_c)
df.train[j] = getDataT(DATA_SET,paste("s_feat_train_all_",j,sep = ""))[idxTrain]
df.train$id <- NULL
df.train.target = getDataT(DATA_SET,"train")[idxTrain,]$Demanda_uni_equil
df.test <- data.frame(id=idxTest)
for (j in fmla_c)
df.test[j] = getDataT(DATA_SET,paste("s_feat_test_all_",j,sep = ""))[idxTest]
df.test$id <- NULL
df.test.target = getDataT(DATA_SET,"test")[idxTest,]$Demanda_uni_equil
# FIT on train ...
x = as.matrix(df.train)
y = as.matrix(df.train.target)
fit.lambda  = cv.glmnet(x,y)
fit.train <- glmnet(x, y, family="gaussian", alpha=0, lambda=fit.lambda$lambda.1se)
# PREDICT on test cv ...
x = as.matrix(df.test)
pred_test <- predict.glmnet(fit.train, x, type="link",s=fit.train$lambda[length(fit.train$lambda)])
pred_test[which(pred_test<0)] = 0
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print("Demanda_uni_equil, cv:")
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 10000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 1:20
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 500
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 1:20
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
nCli = 50000
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# Split Clients in approx equal clusters of less than nCli Clients
# All sequence: ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
ssq = 1:20
for (jBin in ssq)
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
source("assmbl.wip.000.R")
# TODO:
#  idx = which(total_pred_test$id %in% test$id)
#  total_pred_test[idx,]$val = pred_test
}
errMeasure3(df.test$AA,df.test.target)
errMeasure3(df.test$AB,df.test.target)
errMeasure3(df.test$AA1,df.test.target)
errMeasure3(0.9*df.test$AA1+0.1*df.test$AA1,df.test.target)
errMeasure3(0.9*df.test$AA+0.1*df.test$AA1,df.test.target)
errMeasure3(-0.2+0.9*df.test$AA+0.1*df.test$AA1,df.test.target)
errMeasure3(0.95*df.test$AA+0.05*df.test$AA1,df.test.target)
errMeasure3(1*df.test$AA+0.05*df.test$AA1,df.test.target)
errMeasure3(1*df.test$AA-0.1*df.test$AA1,df.test.target)
errMeasure3(df.test$AA)
errMeasure3(0.95*df.test$AA+0.05*log1p(df.test$AA1),df.test.target)
errMeasure3(0.9*df.test$AA+0.1*log1p(df.test$AA1),df.test.target)
errMeasure3(0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(0.2*df.test$AA+0.7*log1p(df.test$AA1),df.test.target)
errMeasure3(0.1*df.test$AA+0.8*log1p(df.test$AA1),df.test.target)
errMeasure3(0.1*df.test$AA+0.9*log1p(df.test$AA1),df.test.target)
errMeasure3(0.3*df.test$AA+0.7*log1p(df.test$AA1),df.test.target)
errMeasure3(0.4*df.test$AA+0.6*log1p(df.test$AA1),df.test.target)
errMeasure3(0.1*df.test$AA+0.9*log1p(df.test$AA1),df.test.target)
errMeasure3(0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(0.6*df.test$AA+0.4*log1p(df.test$AA1),df.test.target)
errMeasure3(0.4*df.test$AA+0.4*log1p(df.test$AA1),df.test.target)
errMeasure3(0.4*df.test$AA+0.7*log1p(df.test$AA1),df.test.target)
G_ = getDataT(DATA_SET,paste("s_feat_test_all_","G",sep = ""))[idxTest]
B_ = getDataT(DATA_SET,paste("s_feat_test_all_","B",sep = ""))[idxTest]
AA_ = getDataT(DATA_SET,paste("s_feat_test_all_","AA",sep = ""))[idxTest]
C_ = getDataT(DATA_SET,paste("s_feat_test_all_","C",sep = ""))[idxTest]
AB_ = getDataT(DATA_SET,paste("s_feat_test_all_","AB",sep = ""))[idxTest]
mean_pred_test = 0.718*G_ + 0.187*B_ + 0.115
mean_pred_test[which(is.na(mean_pred_test))] = 0.745*B_[which(is.na(mean_pred_test))] + 0.192
mean_pred_test[which(is.na(mean_pred_test))] = 0.822*AA_[which(is.na(mean_pred_test))] + 0.855
mean_pred_test[which(is.na(mean_pred_test))] = 0.53*C_[which(is.na(mean_pred_test))] + 0.95
mean_pred_test[which(is.na(mean_pred_test))] = 0.5*AB_[which(is.na(mean_pred_test))] + 1
err_mean_pred_test = errMeasure3(mean_pred_test,df.test.target)
print(err_mean_pred_test)
sum(is.na(mean_pred_test))
errMeasure3(0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(1+0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(-0.1+0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(0.1+0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(0.2+0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
errMeasure3(0.15+0.5*df.test$AA+0.5*log1p(df.test$AA1),df.test.target)
