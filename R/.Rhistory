top_k <- function(hc,v1,k){
hc_sorted <- hc[order(v1,decreasing=TRUE)]
n <- min(k,length(hc_sorted))
# n <- min(3,length(hc_sorted))
paste(hc_sorted[1:n],collapse=",")
}
top_kk <- function(plid,n,k){
tt = plid[order(n,decreasing = TRUE)]
nn = min(k,length(tt))
paste( tt[1:nn],collapse=",")
}
top_score_kk <- function(plid,n,k){
tt = n[order(n,decreasing = TRUE)]
nn = min(k,length(tt))
paste( tt[1:nn],collapse=",")
}
top_prc_kk <- function(plid,n,k){
tt = n[order(n,decreasing = TRUE)]/sum(n)
nn = min(k,length(tt))
paste( tt[1:nn],collapse=",")
}
top_bprc_kk <- function(plid,n,k,bp){
tt = n[order(n,decreasing = TRUE)]/sum(n)*bp
nn = min(k,length(tt))
paste( tt[1:nn],collapse=",")
}
top_val_k <- function(hc,v1,k){
hc_sorted <- v1[order(v1,decreasing=TRUE)]
n <- min(k,length(hc_sorted))
# n <- min(3,length(hc_sorted))
paste(hc_sorted[1:n],collapse=",")
}
top_prc_k <- function(hc,v1,k){
hc_sorted <- v1[order(v1,decreasing=TRUE)]
hc_sorted <- hc_sorted/sum(hc_sorted)
n <- min(k,length(hc_sorted))
# n <- min(3,length(hc_sorted))
paste(hc_sorted[1:n],collapse=",")
}
s_fct_mean <- function(x)
{
floor(mean(x))
}
subName = ".wip.000.csv"
estRet = list()
estRetE = list()
s_class_all = list()
s_feat_train_all = list()
s_feat_test_all = list()
s_err_train_all = list()
s_err_test_all = list()
s_feat_list_all = list()
#######################################
#   Pattern based learners:
#######################################
#######################################
class_name   = "A"
s_feat_list = list("Cliente_ID","Producto_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "B"
s_feat_list = list("Ruta_SAK","Producto_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "C"
s_feat_list = list("Agencia_ID","Producto_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "D"
s_feat_list = list("Ruta_SAK","Cliente_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "E"
s_feat_list = list("Agencia_ID","Cliente_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "F"
s_feat_list = list("Agencia_ID","Ruta_SAK")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "G"
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "H"
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID","Ruta_SAK")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "I"
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID","Ruta_SAK","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
class_name   = "J"
s_feat_list = list("Producto_ID","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
#######################################
# list the "classes":
lbl = names(s_feat_list_all)
for (l in lbl) print(c(l,s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(l,s_err_test_all[[l]][1])) # test errors
##################
# Assembling:
df.test <- data.frame(id=test$id)
for (j in 1:length(s_feat_test_all))
df.test[names(s_feat_test_all[j])] = s_feat_test_all[[j]]$V1
lbl
s_feat_list_all
#######################################
class_name   = "K"
s_feat_list = list("Cliente_ID","Producto_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
s_feat_list_all
#######################################
class_name   = "K"
s_feat_list = list("Cliente_ID","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_train <- merge(train,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
bk = 0.4*mean(s_feat_test$V1,na.rm = TRUE)
idxna = which(is.na(s_feat_test$V1))
s_feat_test[which(is.na(s_feat_test$V1))] = bk
s_err_train = errMeasure(s_feat_train$V1,train$Demanda_uni_equil)
s_err_test = errMeasure(s_feat_test$V1,test$Demanda_uni_equil)
print(s_err_train[[1]])
print(s_err_test[[1]])
s_class_all[[class_name]] = s_class
s_feat_train_all[[class_name]] = s_feat_train
s_feat_test_all[[class_name]] = s_feat_test
s_err_train_all[[class_name]] = s_err_train
s_err_test_all[[class_name]] = s_err_test
s_feat_list_all[[class_name]] = unlist(s_feat_list)
#######################################
# list the "classes":
lbl = names(s_feat_list_all)
for (l in lbl) print(c(l,s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(l,s_err_test_all[[l]][1])) # test errors
lbl = names(s_feat_list_all)
for (l in lbl) print(c(l,s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(l,s_err_test_all[[l]][1])) # test errors
lbl = names(s_feat_list_all)
s_feat_list_all
for (l in lbl) print(c(l,s_err_test_all[[l]][1])) # test errors
for (l in lbl) print(c(names(s_feat_list_all[[l]]),s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(names(s_feat_list_all[l]),s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(names(s_feat_list_all[[l]]),s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(names(s_feat_list_all[[l]]),s_err_test_all[[l]][1])) # test errors
for (l in lbl) print(c(l,s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(l,s_err_test_all[[l]][1])) # test errors
for (l in lbl) print(c(s_feat_list_all[[l]][1],s_err_test_all[[l]][1])) # test errors
l
lbl
for (l in lbl) print(c(l,s_feat_list_all[[l]][1])) # features
for (l in lbl) print(c(l,s_feat_list_all[[l]])) # features
for (l in lbl) print(c(l,s_feat_list_all[[l]],s_err_test_all[[l]][1])) # features
s_err_test_all[["A"]][1]
unlist(s_err_test_all[["A"]][1])
for (l in lbl) print(c(l,s_feat_list_all[[l]],unlist(s_err_test_all[[l]][1]))) # features
for (l in lbl) print(c(l,s_feat_list_all[[l]],unlist(s_err_train_all[[l]][1]))) # features and train errors
df.test <- data.frame(id=test$id)
for (j in 1:length(s_feat_test_all))
df.test[names(s_feat_test_all[j])] = s_feat_test_all[[j]]$V1
df.test
df.test[1:10,]
df.test[,A:C]
df.test[1:5,2:4]
df.test[1:5,2:40]
df.test[1:5,2:ncol(df.test)]
lm(test$Demanda_uni_equil ~ df.test[,2:ncol(df.test)])
class(df.test[[1]])
class(df.test[[2]])
class(df.test[[3]])
class(df.test[[4]])
class(df.test[[5]])
class(df.test[,2:3])
lm(test$Demanda_uni_equil ~ df.test-1)
lm(df.test[[1]] ~ df.test-1)
lm(df.test[,1] ~ df.test-1)
lm(test$Demanda_uni_equil ~ df.test)
class(df.test)
lm(as.vector(test$Demanda_uni_equil) ~ df.test)
lm(as.vector(test$Demanda_uni_equil) ~ as.data.frame(df.test))
lm(as.vector(test$Demanda_uni_equil) ~ as.numeric(df.test))
df.test[,2]
df.test[,2]+1
class(df.test[,2])
df.test^2
lm(test$Demanda_uni_equil ~ df.test)
lm(test$Demanda_uni_equil ~ c(A,B),data=df.test)
lm(test$Demanda_uni_equil ~ .,data=df.test)
fit = lm(test$Demanda_uni_equil ~ .,data=df.test)
summary(fit)
library(bit64)
library(lava)
library(data.table)
library(ggplot2)
library(caret)
source("futil.R")
#source("processSubmissions.R)")
# validation:
# 0 - TEST
# 1 - CV
# 2 - CV with a very small set
VALIDATION = 2
#VALIDATION = 1
train <-
fread('../data/train.csv', header=TRUE,
select = c("Semana","Agencia_ID","Canal_ID","Ruta_SAK","Cliente_ID","Producto_ID","Venta_uni_hoy","Venta_hoy","Dev_uni_proxima","Dev_proxima","Demanda_uni_equil"))
if (VALIDATION == 2) # short set of train/test for quick CV
{
nCli = 10000;
set.seed(2300)
trainCli = sample(unique(train$Cliente_ID),nCli)
trainWeeks = c(3,4,5,6,7)
testWeeks = c(8)
testWeeks2 = c(9)
idxTrain = which(train$Cliente_ID %in% trainCli & train$Semana %in% trainWeeks)
idxTest = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks)
idxTest2 = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks2)
test = train[idxTest,]
test2 = train[idxTest2,]
train = train[idxTrain,]
train$id = 1:nrow(train)
test$id = 1:nrow(test)
test2$id = 1:nrow(test)
}
train <-
fread('../data/train.csv', header=TRUE,
select = c("Semana","Agencia_ID","Canal_ID","Ruta_SAK","Cliente_ID","Producto_ID","Venta_uni_hoy","Venta_hoy","Dev_uni_proxima","Dev_proxima","Demanda_uni_equil"))
nCli = 10000;
set.seed(2300)
trainCli = sample(unique(train$Cliente_ID),nCli)
trainWeeks = c(3,4,5,6,7)
testWeeks = c(8)
testWeeks2 = c(9)
idxTrain = which(train$Cliente_ID %in% trainCli & train$Semana %in% trainWeeks)
idxTest = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks)
idxTest2 = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks2)
test = train[idxTest,]
test2 = train[idxTest2,]
train = train[idxTrain,]
train$id = 1:nrow(train)
test$id = 1:nrow(test)
test2$id = 1:nrow(test2)
memory.size(max=40000)
source('E:/user/projects/axomath/Kaggle-Bimbo/R/call.wip.000.R')
if (VALIDATION == 3) # short set of train/test for quick CV
{
train.bak <-
fread('../data/train.csv', header=TRUE,
select = c("Semana","Agencia_ID","Canal_ID","Ruta_SAK","Cliente_ID","Producto_ID","Venta_uni_hoy","Venta_hoy","Dev_uni_proxima","Dev_proxima","Demanda_uni_equil"))
nCli = 50000;
#nCli = 50000;
for (jBin in 1:ceiling(length(unique(train.bak$Cliente_ID))/nCli))
{
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,nrow(train.bak))
train <- train.bak
set.seed(2300)
trainCli = sample(unique(train$Cliente_ID),nCli*(1+jBin))[((jBin-1)*nCli+1):(jBin*nCli)]
trainWeeks = c(3,4,5,6,7)
testWeeks = c(8)
testWeeks2 = c(9)
idxTrain = which(train$Cliente_ID %in% trainCli & train$Semana %in% trainWeeks)
idxTest = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks)
idxTest2 = which(train$Cliente_ID %in% trainCli & train$Semana %in% testWeeks2)
test = train[idxTest,]
test2 = train[idxTest2,]
train = train[idxTrain,]
train$id = 1:nrow(train)
test$id = 1:nrow(test)
test2$id = 1:nrow(test2)
print(c("jBin: ",jBin))
source(wip.R)
}
remove(train.bak)
}
jBin
jMin
jMax
nrow(train.bak)
jBin*nCli
length(unique(train.bak$Cliente_ID))
jBin
jBin*nCli
trainCli = sample(unique(train$Cliente_ID),length(unique(train$Cliente_ID)))[((jBin-1)*nCli+1):(jBin*nCli)]
jBin*nCli
(jBin-1)*nCli+1)
(jBin-1)*nCli+1
length(unique(train$Cliente_ID))
jBin*nCli
ceiling(nu_Cl/nCli)
nu_Cl = length(unique(train.bak$Cliente_ID))
n_Cl = length(train.bak$Cliente_ID)
ceiling(nu_Cl/nCli)
nu_Cl/nCli
nu_Cl/nCli*50000
nu_Cl
jBin
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,nu_Cl)
jBin=18
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,nu_Cl)
jMin
jMax
nCli = 50000;
nu_Cl = length(unique(train.bak$Cliente_ID))
n_Cl = length(train.bak$Cliente_ID)
VALIDATION
source('E:/user/projects/axomath/Kaggle-Bimbo/R/call.wip.000.R')
VALIDATION = 2
source('E:/user/projects/axomath/Kaggle-Bimbo/R/call.wip.000.R')
