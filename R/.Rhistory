#######################################
class_name   = "I"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID","Ruta_SAK","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "J"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Producto_ID","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "K"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Cliente_ID","Canal_ID")
s_fct = s_fct_mean
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "AMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Cliente_ID","Producto_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "AAMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Cliente_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "ABMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Producto_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "BMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Ruta_SAK","Producto_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "CMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Producto_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "DMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Ruta_SAK","Cliente_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "EMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Cliente_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "FMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Ruta_SAK")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "GMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "HMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID","Ruta_SAK")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "IMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Agencia_ID","Cliente_ID","Producto_ID","Ruta_SAK","Canal_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "JMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Producto_ID","Canal_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
#######################################
class_name   = "KMAX"
class_name   = paste(class_name,"w",S,collapse = "",sep="")
s_feat_list = list("Cliente_ID","Canal_ID")
s_fct = s_fct_max
c_feat = c(unlist(s_feat_list))
s_class <- train[,list(s_fct(Demanda_uni_equil),.N),by=c_feat]
s_feat_list_all[[class_name]] = unlist(s_feat_list)
s_feat_train <- merge(train.swp,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_train_this = s_feat_train$V1
s_feat_test <- merge(test,s_class,by=c_feat,all.x=TRUE)[order(id),list(id,V1)]
s_feat_test_this = s_feat_test$V1
saveDataT(s_feat_train_this,DATABASE,paste("s_feat_train_all","_",class_name,sep=""))
saveDataT(s_feat_test_this,DATABASE,paste("s_feat_test_all","_",class_name,sep=""))
remove(s_feat_train_this)
remove(s_feat_test_this)
gc()
print(paste(class_name,"done"))
#######################################
train = train.swp
remove(train.swp)
gc()
}
library(data.table)
source("futil.R")
# VALIDATION:
# 0 - TEST
# 1 - CV total
# 2 - CV with a small set
# 3 - CV in a loop
# 4 - mini Validation
# 5.1 - Global Validation: Train(semana 3-7), CV(8)
# 5.2 - Global Validation: Train(semana 3-8), CV(9)
# 5.3 - Submissions:       Train (3-9), Test(10)
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV1_0"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
pred_test_all_list = list()
pred_test_all.bak_list = list()
df.test.target_list = list()
mean_pred_test_list = list()
mean_pred_test_combined_list = list()
# Split Clients in approx equal clusters of less than nCli Clients
nCli = 10000
total_pred_test = as.data.frame(0*cbind(1:nrow(test.bak),1:nrow(test.bak)))
colnames(total_pred_test) = c("id","val")
total_pred_test$id = test.bak$id+10
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# All sequence:
ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
# ssq = 3:10
# ssq = 2
# ssq = c(1,5,8,9,16,18) # the worst
ssq = 3
library(data.table)
source("futil.R")
# VALIDATION:
# 0 - TEST
# 1 - CV total
# 2 - CV with a small set
# 3 - CV in a loop
# 4 - mini Validation
# 5.1 - Global Validation: Train(semana 3-7), CV(8)
# 5.2 - Global Validation: Train(semana 3-8), CV(9)
# 5.3 - Submissions:       Train (3-9), Test(10)
VALIDATION = 5.2
VERBOSE = 1
#DATA_RELOAD = 1
#wip.R = "wip.000.R"
DATA_SET = "CV-1"
train.bak = getDataT(DATA_SET,"train")
test.bak = getDataT(DATA_SET,"test")
pred_test_all_list = list()
pred_test_all.bak_list = list()
df.test.target_list = list()
mean_pred_test_list = list()
mean_pred_test_combined_list = list()
# Split Clients in approx equal clusters of less than nCli Clients
nCli = 10000
total_pred_test = as.data.frame(0*cbind(1:nrow(test.bak),1:nrow(test.bak)))
colnames(total_pred_test) = c("id","val")
total_pred_test$id = test.bak$id+10
# Randomize the Clients:
all_Cli = unique(train.bak$Cliente_ID)
num_Cli = length(all_Cli)
set.seed(2300)
rnd_Cli = sample(all_Cli,num_Cli)
# All sequence:
ssq = 1:ceiling(num_Cli/nCli)
# Just a sample: ssq = 1
# ssq = 3:10
# ssq = 2
# ssq = c(1,5,8,9,16,18) # the worst
ssq = 3
jBin
jBin=3
print(c("jBin ",jBin," out of ",length(ssq), " just Started ",timestamp()))
##------ Tue Aug 09 23:23:40 2016 ------##
jMin = (jBin-1)*nCli+1
jMax = min(jBin*nCli,num_Cli)
clusterCli = rnd_Cli[jMin:jMax]
idxTrain   = which(train.bak$Cliente_ID %in% clusterCli)
idxTest    = which(test.bak$Cliente_ID %in% clusterCli)
train    = train.bak[idxTrain,]
test     = test.bak[idxTest,]
library(sgd)
library(penalized)
library(xgboost)
library(glmnet)
library(Ckmeans.1d.dp)
# DATA_SET = "CV-1"
# Cluster - defined by rows to be assembled:
#idx = c(1:10000) #e.g.
print(DATA_SET)
fmla_c_glmnet =     c("AA","AB","F","G","AAw7","ABw7","Fw7","Gw7")
print("GLMNET")
fmla_c = fmla_c_glmnet
# LOAD the train and test data:
df.train <- data.frame(id=idxTrain)
for (j in fmla_c)
df.train[j] = getDataT(DATA_SET,paste("s_feat_train_all_",j,sep = ""))[idxTrain]
df.train$id <- NULL
df.train.target = getDataT(DATA_SET,"train")[idxTrain,]$Demanda_uni_equil
df.test <- data.frame(id=idxTest)
for (j in fmla_c)
df.test[j] = getDataT(DATA_SET,paste("s_feat_test_all_",j,sep = ""))[idxTest]
df.test$id <- NULL
df.test.target = getDataT(DATA_SET,"test")[idxTest,]$Demanda_uni_equil
# FIT on train ...
x = as.matrix(df.train)
y = as.matrix(df.train.target)
fit.lambda  = cv.glmnet(x,y)
fit.train <- glmnet(x, y, family="gaussian", alpha=0, lambda=fit.lambda$lambda.1se)
# PREDICT on test cv ...
x = as.matrix(df.test)
pred_test <- predict.glmnet(fit.train, x, type="link",s=fit.train$lambda[length(fit.train$lambda)])
pred_test[which(pred_test<0)] = 0
err_pred_test = errMeasure3(pred_test,df.test.target)
if (VERBOSE == 1){
print(err_pred_test)
}
pred_test_glmnet = pred_test
err_pred_test_glmnet = err_pred_test
source('H:/user/projects/axomath/Kaggle-Bimbo/R/script-2.R')
source('H:/user/projects/axomath/Kaggle-Bimbo/R/script-2.R')
library(data.table)
library(xgboost)
train=fread('../data/train.csv',select = c("Semana",'Cliente_ID', 'Producto_ID', 'Agencia_ID', 'Ruta_SAK', 'Demanda_uni_equil'))
test=fread('../data/test.csv',select = c("Semana",'id','Cliente_ID', 'Producto_ID', 'Agencia_ID', 'Ruta_SAK'))
# Cut the train set to 8 and 9 weeks (Semana) for using only one week lags for target variable.
# If you have enough memory, you can set up condition Semana>3 on the next row for using lagged values of target variable for 5 weeks.
train=train[Semana>7,]
train$id=0
train[,target:=Demanda_uni_equil]
train[,Demanda_uni_equil:=NULL]
train[,tst:=0]
test$target=0
test[,tst:=1]
data=rbind(train,test)
rm(test)
rm(train)
# Creating features for one week lagged values of target variable
data1<-data[,.(Semana=Semana+1,Cliente_ID,Producto_ID,target)]
data=merge(data,data1[Semana>8,.(targetl1=mean(target)), by=.(Semana,Cliente_ID,Producto_ID)],all.x=T, by=c("Semana","Cliente_ID","Producto_ID"))
# If you have enough memory, you can set up value TRUE in the following condition to make it possible to use lagged values of target variable
# for lagged 2-5 weeks as additional features
if(TRUE){
data1<-data[,.(Semana=Semana+2,Cliente_ID,Producto_ID,target)]
data=merge(data,data1[Semana>8,.(targetl2=mean(target)), by=.(Semana,Cliente_ID,Producto_ID)],all.x=T, by=c("Semana","Cliente_ID","Producto_ID"))
data1<-data[,.(Semana=Semana+3,Cliente_ID,Producto_ID,target)]
data=merge(data,data1[Semana>8,.(targetl3=mean(target)), by=.(Semana,Cliente_ID,Producto_ID)],all.x=T, by=c("Semana","Cliente_ID","Producto_ID"))
data1<-data[,.(Semana=Semana+4,Cliente_ID,Producto_ID,target)]
data=merge(data,data1[Semana>8,.(targetl4=mean(target)), by=.(Semana,Cliente_ID,Producto_ID)],all.x=T, by=c("Semana","Cliente_ID","Producto_ID"))
data1<-data[,.(Semana=Semana+5,Cliente_ID,Producto_ID,target)]
data=merge(data,data1[Semana>8,.(targetl5=mean(target)), by=.(Semana,Cliente_ID,Producto_ID)],all.x=T, by=c("Semana","Cliente_ID","Producto_ID"))
}
rm(data1)
data=data[Semana>8,]
data
# Creating frequency features for some factor variables
nAgencia_ID=data[,.(nAgencia_ID=.N),by=.(Agencia_ID,Semana)]
nAgencia_ID=nAgencia_ID[,.(nAgencia_ID=mean(nAgencia_ID,na.rm=T)),by=Agencia_ID]
data=merge(data,nAgencia_ID,by='Agencia_ID',all.x=T)
nRuta_SAK=data[,.(nRuta_SAK=.N),by=.(Ruta_SAK,Semana)]
nRuta_SAK=nRuta_SAK[,.(nRuta_SAK=mean(nRuta_SAK,na.rm=T)),by=Ruta_SAK]
data=merge(data,nRuta_SAK,by='Ruta_SAK',all.x=T)
nCliente_ID=data[,.(nCliente_ID=.N),by=.(Cliente_ID,Semana)]
nCliente_ID=nCliente_ID[,.(nCliente_ID=mean(nCliente_ID,na.rm=T)),by=Cliente_ID]
data=merge(data,nCliente_ID,by='Cliente_ID',all.x=T)
nProducto_ID=data[,.(nProducto_ID=.N),by=.(Producto_ID,Semana)]
nProducto_ID=nProducto_ID[,.(nProducto_ID=mean(nProducto_ID,na.rm=T)),by=Producto_ID]
data=merge(data,nProducto_ID,by='Producto_ID',all.x=T)
data$target=log(data$target+1)
data_train=data[tst==0,]
data_test=data[tst==1,]
features=names(data_train)[!(names(data_train) %in% c('id',"target",'tst'))]
rm(data)
wltst=sample(nrow(data_train),30000)
dval<-xgb.DMatrix(data=data.matrix(data_train[wltst,features,with=FALSE]),
label=data.matrix(data_train[wltst,target]),missing=NA)
watchlist<-list(dval=dval)
data_train
clf <- xgb.train(params=list(  objective="reg:linear",
booster = "gbtree",
eta=0.1,
max_depth=10,
subsample=0.85,
colsample_bytree=0.7) ,
data = xgb.DMatrix(data=data.matrix(data_train[-wltst,features,with=FALSE]),
label=data.matrix(data_train[-wltst,target]),missing=NA),
nrounds = 75,
verbose = 1,
print_every_n=5,
early_stopping_rounds    = 10,
watchlist           = watchlist,
maximize            = FALSE,
eval_metric='rmse'
)
