{
    "contents" : "library(moments)\nerrMeasure <- function (vPred, vTarget)\n{\n  if (length(vPred) != length(vTarget))\n    return(-1);\n  s1 = log(1+vPred)\n  s2 = log(1+vTarget)\n  s12 = (s1-s2)^2\n  return(list(sqrt(mean(s12,na.rm = TRUE)),(s1-s2),s12))\n}\n\nerrMeasure1 <- function (vPred, vTarget)\n{\n  vPred = as.data.frame(vPred)\n  vTarget = as.data.frame(vTarget)\n  vPred$V1 <- NULL\n  s1 = sum(vPred[,1]==vTarget[,1])\n  s2 = sum(vPred[,2]==vTarget[,1])\n  s3 = sum(vPred[,3]==vTarget[,1])\n  ret = (s1+0.5*s2+1/3*s3)/nrow(vPred)\n  return(ret)\n  #vPred = cbind(vPred,vTarget);\n  #ret = apply(vPred,MARGIN=1,function(x) {ix = which(x[1:3]==x[4]);v=0; if(length(ix) != 0) v=1/ix; return(v)});\n  #return(mean(ret))\n}\n\n\nmakeSubmissionFromForecastFile <- function(csvFile,s)\n{\n  options(scipen = 999)\n  tmp = read.csv(file=csvFile,header=FALSE)\n  nr = nrow(tmp)\n  nc = ncol(tmp)\n  predMatrix = as.data.frame(matrix(data=tmp,nrow=nr,ncol=nc))\n  makeSubmission(predMatrix,s)\n  options(scipen = 0)\n  return(predMatrix)\n}\n\nmakeSubmission <- function(predMatrix,s)\n{\n  options(scipen = 999)\n  fname.csv = paste(\"submission\",s,\".csv\",sep=\"\")\n  fname.rda = paste(\"submission\",s,\".rda\",sep=\"\")\n  predFinal <- NULL\n  predFinal <- predMatrix\n\n  save(predFinal,file=fname.rda)\n  write.table(predFinal,file=fname.csv,sep=\",\",row.names=FALSE,col.names=c(\"id\",\"relevance\"))\n  options(scipen = 0)\n}\n\nsumForecastFiles <- function(inFileList,outFile,nr,sumW=NA)\n{\n  # in File List, list with forecast files to be combined\n  # format: csvFile, csv format: Id, 60 intraday returns, 2 daily returns\n  # You should assign nr = 120000 for the contest\n  # sumW are the sum weight. default, 1, the result is the sum. Can be tune to compute the average, etc\n  options(scipen = 999)\n  nc = 63\n  nf = length(inFileList)\n  if (is.na(sumW[1]))\n    wcf = 1+vector(mode=\"numeric\",length=nf)\n  if (!is.na(sumW[1]))\n    wcf = as.vector(sumW,mode=\"numeric\")\n  predMatrix = as.data.frame(matrix(nrow=nr,ncol=nc))\n  predMatrix[is.na(predMatrix)] <- 0\n  predMatrix[,1]=1:nr\n  predMatrixTmp = as.data.frame(matrix(nrow=nr,ncol=nc))\n  predMatrixTmp[is.na(predMatrixTmp)] <- 0\n  predMatrixTmp[,1]=1:nr\n\n  for (i in 1:nf)\n  {\n    tmp = read.csv(file=inFileList[[i]],header=TRUE)\n    predMatrixTmp[tmp[,1],1:ncol(tmp)] = tmp\n    predMatrixTmp[is.na(predMatrixTmp)] <- 0\n    \n    predMatrix[,2:nc] = predMatrix[,2:nc] + wcf[[i]]*predMatrixTmp[,2:nc]\n  }\n  write.table(predMatrix,file=outFile,row.names = FALSE,col.names = FALSE,sep=\",\")  \n  return(predMatrix);\n}\n\n\n\n\n\n",
    "created" : 1467994899976.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3652626755",
    "id" : "B8C19E07",
    "lastKnownWriteTime" : 1468120158,
    "path" : "~/Projects/Kaggle/Kaggle-Bimbo/R/futil.R",
    "project_path" : "futil.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}